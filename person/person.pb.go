// Code generated by protoc-gen-go.
// source: person.proto
// DO NOT EDIT!

/*
Package person is a generated protocol buffer package.

It is generated from these files:
	person.proto

It has these top-level messages:
	PersonRequest
	PersonResponse
	PersonFilter
*/
package person

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message for creating a new person
type PersonRequest struct {
	Id        int32                    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email     string                   `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phone     string                   `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
	Addresses []*PersonRequest_Address `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *PersonRequest) Reset()                    { *m = PersonRequest{} }
func (m *PersonRequest) String() string            { return proto.CompactTextString(m) }
func (*PersonRequest) ProtoMessage()               {}
func (*PersonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PersonRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PersonRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PersonRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PersonRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PersonRequest) GetAddresses() []*PersonRequest_Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type PersonRequest_Address struct {
	Street            string `protobuf:"bytes,1,opt,name=street" json:"street,omitempty"`
	City              string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	State             string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Zip               string `protobuf:"bytes,4,opt,name=zip" json:"zip,omitempty"`
	IsShippingAddress bool   `protobuf:"varint,5,opt,name=isShippingAddress" json:"isShippingAddress,omitempty"`
}

func (m *PersonRequest_Address) Reset()                    { *m = PersonRequest_Address{} }
func (m *PersonRequest_Address) String() string            { return proto.CompactTextString(m) }
func (*PersonRequest_Address) ProtoMessage()               {}
func (*PersonRequest_Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *PersonRequest_Address) GetStreet() string {
	if m != nil {
		return m.Street
	}
	return ""
}

func (m *PersonRequest_Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *PersonRequest_Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *PersonRequest_Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *PersonRequest_Address) GetIsShippingAddress() bool {
	if m != nil {
		return m.IsShippingAddress
	}
	return false
}

type PersonResponse struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *PersonResponse) Reset()                    { *m = PersonResponse{} }
func (m *PersonResponse) String() string            { return proto.CompactTextString(m) }
func (*PersonResponse) ProtoMessage()               {}
func (*PersonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PersonResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PersonResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PersonFilter struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
}

func (m *PersonFilter) Reset()                    { *m = PersonFilter{} }
func (m *PersonFilter) String() string            { return proto.CompactTextString(m) }
func (*PersonFilter) ProtoMessage()               {}
func (*PersonFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PersonFilter) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func init() {
	proto.RegisterType((*PersonRequest)(nil), "person.PersonRequest")
	proto.RegisterType((*PersonRequest_Address)(nil), "person.PersonRequest.Address")
	proto.RegisterType((*PersonResponse)(nil), "person.PersonResponse")
	proto.RegisterType((*PersonFilter)(nil), "person.PersonFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Person service

type PersonClient interface {
	// Get all Persons with filter - A server-to-client streaming RPC.
	GetPersons(ctx context.Context, in *PersonFilter, opts ...grpc.CallOption) (Person_GetPersonsClient, error)
	// Create a new Person - A simple RPC
	CreatePerson(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*PersonResponse, error)
}

type personClient struct {
	cc *grpc.ClientConn
}

func NewPersonClient(cc *grpc.ClientConn) PersonClient {
	return &personClient{cc}
}

func (c *personClient) GetPersons(ctx context.Context, in *PersonFilter, opts ...grpc.CallOption) (Person_GetPersonsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Person_serviceDesc.Streams[0], c.cc, "/person.Person/GetPersons", opts...)
	if err != nil {
		return nil, err
	}
	x := &personGetPersonsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Person_GetPersonsClient interface {
	Recv() (*PersonRequest, error)
	grpc.ClientStream
}

type personGetPersonsClient struct {
	grpc.ClientStream
}

func (x *personGetPersonsClient) Recv() (*PersonRequest, error) {
	m := new(PersonRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personClient) CreatePerson(ctx context.Context, in *PersonRequest, opts ...grpc.CallOption) (*PersonResponse, error) {
	out := new(PersonResponse)
	err := grpc.Invoke(ctx, "/person.Person/CreatePerson", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Person service

type PersonServer interface {
	// Get all Persons with filter - A server-to-client streaming RPC.
	GetPersons(*PersonFilter, Person_GetPersonsServer) error
	// Create a new Person - A simple RPC
	CreatePerson(context.Context, *PersonRequest) (*PersonResponse, error)
}

func RegisterPersonServer(s *grpc.Server, srv PersonServer) {
	s.RegisterService(&_Person_serviceDesc, srv)
}

func _Person_GetPersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PersonFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServer).GetPersons(m, &personGetPersonsServer{stream})
}

type Person_GetPersonsServer interface {
	Send(*PersonRequest) error
	grpc.ServerStream
}

type personGetPersonsServer struct {
	grpc.ServerStream
}

func (x *personGetPersonsServer) Send(m *PersonRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Person_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Person/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServer).CreatePerson(ctx, req.(*PersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Person_serviceDesc = grpc.ServiceDesc{
	ServiceName: "person.Person",
	HandlerType: (*PersonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _Person_CreatePerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPersons",
			Handler:       _Person_GetPersons_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "person.proto",
}

func init() { proto.RegisterFile("person.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0xdd, 0x4a, 0xc3, 0x40,
	0x10, 0x85, 0x9b, 0xb4, 0x4d, 0xed, 0x58, 0x8b, 0x2e, 0xb5, 0x84, 0x82, 0x50, 0x72, 0x95, 0x0b,
	0x29, 0x52, 0xef, 0x14, 0x11, 0x11, 0xf4, 0x56, 0xe2, 0x13, 0xc4, 0x64, 0xb0, 0x8b, 0x6d, 0x76,
	0xdd, 0xd9, 0x22, 0xf5, 0x09, 0x04, 0xdf, 0xc4, 0xa7, 0x34, 0xfb, 0x13, 0xa4, 0xb6, 0x77, 0xe7,
	0x9c, 0x9e, 0xce, 0x7e, 0x33, 0x04, 0x06, 0x12, 0x15, 0x89, 0x6a, 0x26, 0x95, 0xd0, 0x82, 0x45,
	0xce, 0x25, 0x3f, 0x21, 0x1c, 0x3d, 0x59, 0x99, 0xe1, 0xfb, 0x1a, 0x49, 0xb3, 0x21, 0x84, 0xbc,
	0x8c, 0x83, 0x69, 0x90, 0x76, 0xb3, 0x5a, 0x31, 0x06, 0x9d, 0x2a, 0x5f, 0x61, 0x1c, 0xd6, 0x49,
	0x3f, 0xb3, 0x9a, 0x8d, 0xa0, 0x8b, 0xab, 0x9c, 0x2f, 0xe3, 0xb6, 0x0d, 0x9d, 0x31, 0xa9, 0x5c,
	0x88, 0x0a, 0xe3, 0x8e, 0x4b, 0xad, 0x61, 0xd7, 0xd0, 0xcf, 0xcb, 0x52, 0x21, 0x11, 0x52, 0xdc,
	0x9d, 0xb6, 0xd3, 0xc3, 0xf9, 0xd9, 0xcc, 0xb3, 0x6c, 0xbd, 0x3c, 0xbb, 0x73, 0xb5, 0xec, 0xaf,
	0x3f, 0xf9, 0x0e, 0xa0, 0xe7, 0x63, 0x36, 0x86, 0x88, 0xb4, 0x42, 0xd4, 0x16, 0xae, 0x9f, 0x79,
	0x67, 0x00, 0x0b, 0xae, 0x37, 0x0d, 0xa0, 0xd1, 0x06, 0x85, 0x74, 0xae, 0xb1, 0x01, 0xb4, 0x86,
	0x1d, 0x43, 0xfb, 0x93, 0x4b, 0x8f, 0x67, 0x24, 0x3b, 0x87, 0x13, 0x4e, 0xcf, 0x0b, 0x2e, 0x25,
	0xaf, 0x5e, 0xfd, 0x43, 0x35, 0x64, 0x90, 0x1e, 0x64, 0xbb, 0x3f, 0x24, 0x57, 0x30, 0x6c, 0x88,
	0x49, 0x8a, 0x8a, 0x70, 0xe7, 0x58, 0x31, 0xf4, 0x68, 0x5d, 0x14, 0x66, 0x4a, 0x68, 0xa7, 0x34,
	0x36, 0x49, 0x61, 0xe0, 0xfe, 0xfb, 0xc0, 0x97, 0x1a, 0x95, 0x69, 0xbe, 0xe1, 0xe6, 0x43, 0xa8,
	0xd2, 0xaf, 0xd3, 0xd8, 0xf9, 0x57, 0x00, 0x91, 0xab, 0xb2, 0x1b, 0x80, 0x47, 0xd4, 0xce, 0x10,
	0x1b, 0x6d, 0x9f, 0xcd, 0x0d, 0x9a, 0x9c, 0xee, 0x3d, 0x66, 0xd2, 0xba, 0x08, 0xd8, 0x2d, 0x0c,
	0xee, 0x15, 0xd6, 0x9b, 0xfb, 0x71, 0xfb, 0xab, 0x93, 0xf1, 0xff, 0xd8, 0x2d, 0x97, 0xb4, 0x5e,
	0x22, 0xfb, 0xb1, 0x5c, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xf4, 0x67, 0x79, 0x3c, 0x02,
	0x00, 0x00,
}
